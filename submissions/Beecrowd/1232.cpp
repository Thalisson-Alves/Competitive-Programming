#include <bits/stdc++.h>
using namespace std;

#ifdef DEBUG
#include "./Competitive-Programming/debug.cpp"
#else
#define dbg(...)
#endif

#define all(x) x.begin(), x.end()

using ll = long long;

constexpr int rotations[12][9*6] = {
  // front cw
  {2, 5, 8, 1, 4, 7, 0, 3, 6, 47, 10, 11, 46, 13, 14, 45, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 44, 30, 31, 43, 33, 34, 42, 36, 37, 38, 39, 40, 41, 9, 12, 15, 29, 32, 35, 48, 49, 50, 51, 52, 53},
  // front ccw
  {6, 3, 0, 7, 4, 1, 8, 5, 2, 42, 10, 11, 43, 13, 14, 44, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 45, 30, 31, 46, 33, 34, 47, 36, 37, 38, 39, 40, 41, 35, 32, 29, 15, 12, 9, 48, 49, 50, 51, 52, 53},
  // rigth cw
  {0, 1, 38, 3, 4, 41, 6, 7, 44, 11, 14, 17, 10, 13, 16, 9, 12, 15, 53, 19, 20, 50, 22, 23, 47, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 24, 39, 40, 21, 42, 43, 18, 45, 46, 2, 48, 49, 5, 51, 52, 8},
  // right ccw
  {0, 1, 47, 3, 4, 50, 6, 7, 53, 15, 12, 9, 16, 13, 10, 17, 14, 11, 44, 19, 20, 41, 22, 23, 38, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 2, 39, 40, 5, 42, 43, 8, 45, 46, 24, 48, 49, 21, 51, 52, 18},
  // back cw
  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 36, 12, 13, 37, 15, 16, 38, 20, 23, 26, 19, 22, 25, 18, 21, 24, 51, 28, 29, 52, 31, 32, 53, 34, 35, 33, 30, 27, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 17, 14, 11},
  // back ccw
  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 53, 12, 13, 52, 15, 16, 51, 24, 21, 18, 25, 22, 19, 26, 23, 20, 38, 28, 29, 37, 31, 32, 36, 34, 35, 11, 14, 17, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 27, 30, 33},
  // left cw
  {45, 1, 2, 48, 4, 5, 51, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 42, 21, 22, 39, 24, 25, 36, 29, 32, 35, 28, 31, 34, 27, 30, 33, 0, 37, 38, 3, 40, 41, 6, 43, 44, 26, 46, 47, 23, 49, 50, 20, 52, 53},
  // left ccw
  {36, 1, 2, 39, 4, 5, 42, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 51, 21, 22, 48, 24, 25, 45, 33, 30, 27, 34, 31, 28, 35, 32, 29, 26, 37, 38, 23, 40, 41, 20, 43, 44, 0, 46, 47, 3, 49, 50, 6, 52, 53},
  // up cw
  {27, 28, 29, 3, 4, 5, 6, 7, 8, 0, 1, 2, 12, 13, 14, 15, 16, 17, 9, 10, 11, 21, 22, 23, 24, 25, 26, 18, 19, 20, 30, 31, 32, 33, 34, 35, 38, 41, 44, 37, 40, 43, 36, 39, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53},
  // up ccw
  {9, 10, 11, 3, 4, 5, 6, 7, 8, 18, 19, 20, 12, 13, 14, 15, 16, 17, 27, 28, 29, 21, 22, 23, 24, 25, 26, 0, 1, 2, 30, 31, 32, 33, 34, 35, 42, 39, 36, 43, 40, 37, 44, 41, 38, 45, 46, 47, 48, 49, 50, 51, 52, 53},
  // down cw
  {0, 1, 2, 3, 4, 5, 15, 16, 17, 9, 10, 11, 12, 13, 14, 24, 25, 26, 18, 19, 20, 21, 22, 23, 33, 34, 35, 27, 28, 29, 30, 31, 32, 6, 7, 8, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 50, 53, 46, 49, 52, 45, 48, 51},
  // down ccw
  {0, 1, 2, 3, 4, 5, 33, 34, 35, 9, 10, 11, 12, 13, 14, 6, 7, 8, 18, 19, 20, 21, 22, 23, 15, 16, 17, 27, 28, 29, 30, 31, 32, 24, 25, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44, 51, 48, 45, 52, 49, 46, 53, 50, 47},
};

void solve()
{
  array<int, 9*6> cube;
  constexpr auto offset = [](char c) -> int {
    int value = 0;
    switch (tolower(c)) {
      case 'f': value = 0; break;
      case 'r': value = 1; break;
      case 'b': value = 2; break;
      case 'l': value = 3; break;
      case 'u': value = 4; break;
      case 'd': value = 5; break;
    }
    return value * 2 + (c >= 'a');
  };

  constexpr auto apply_rotation = [](auto &cube, const auto &rot) -> bool {
    auto cpy = cube;
    bool solved = 1;
    for (auto i = 0; i < 9*6; i++) {
      cube[rot[i]] = cpy[i];
      solved &= cube[rot[i]] == rot[i];
    }
    return solved;
  };

  for (string s; cin >> s;) {
    iota(all(cube), 0);
    auto move = cube;
    for (auto c : s) apply_rotation(move, rotations[offset(c)]);
    int res = 0;
    while (++res, !apply_rotation(cube, move));
    cout << res << '\n';
  }
}

int32_t main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  int t = 1;
  // cin >> t; cin.ignore();
  for (auto i = 1; i <= t; i++) {
    solve();
  }

  return 0;
}
